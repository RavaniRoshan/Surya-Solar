name: Comprehensive Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up test environment
      run: |
        cp .env.example .env
        echo "ENVIRONMENT=test" >> .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env
        echo "SUPABASE_URL=http://localhost:54321" >> .env
        echo "SUPABASE_ANON_KEY=test_key" >> .env
        echo "SUPABASE_SERVICE_ROLE_KEY=test_service_key" >> .env
        echo "RAZORPAY_KEY_ID=test_razorpay_key" >> .env
        echo "RAZORPAY_KEY_SECRET=test_razorpay_secret" >> .env
        echo "HUGGINGFACE_API_TOKEN=test_hf_token" >> .env
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html --cov-fail-under=90
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unit-tests
        name: codecov-unit-tests
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-unit
        path: htmlcov/

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up test environment
      run: |
        cp .env.example .env
        echo "ENVIRONMENT=test" >> .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env
        echo "REDIS_URL=redis://localhost:6379" >> .env
        echo "SUPABASE_URL=http://localhost:54321" >> .env
        echo "SUPABASE_ANON_KEY=test_key" >> .env
        echo "SUPABASE_SERVICE_ROLE_KEY=test_service_key" >> .env
        echo "RAZORPAY_KEY_ID=test_razorpay_key" >> .env
        echo "RAZORPAY_KEY_SECRET=test_razorpay_secret" >> .env
        echo "HUGGINGFACE_API_TOKEN=test_hf_token" >> .env
    
    - name: Run database migrations
      run: |
        # Add database setup commands here
        echo "Setting up test database..."
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --cov=app --cov-append --cov-report=xml
    
    - name: Upload integration test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results
        path: |
          pytest-results.xml
          coverage.xml

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Set up test environment
      run: |
        cp .env.example .env
        echo "ENVIRONMENT=test" >> .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env
        echo "SUPABASE_URL=http://localhost:54321" >> .env
        echo "SUPABASE_ANON_KEY=test_key" >> .env
        echo "SUPABASE_SERVICE_ROLE_KEY=test_service_key" >> .env
        echo "RAZORPAY_KEY_ID=test_razorpay_key" >> .env
        echo "RAZORPAY_KEY_SECRET=test_razorpay_secret" >> .env
        echo "HUGGINGFACE_API_TOKEN=test_hf_token" >> .env
    
    - name: Start backend server
      run: |
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Start frontend server
      run: |
        cd frontend
        npm start &
        sleep 15
    
    - name: Run E2E tests
      run: |
        pytest tests/e2e/ -v --tb=short
    
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          pytest-results.xml
          screenshots/

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up test environment
      run: |
        cp .env.example .env
        echo "ENVIRONMENT=test" >> .env
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" >> .env
        echo "SUPABASE_URL=http://localhost:54321" >> .env
        echo "SUPABASE_ANON_KEY=test_key" >> .env
        echo "SUPABASE_SERVICE_ROLE_KEY=test_service_key" >> .env
        echo "RAZORPAY_KEY_ID=test_razorpay_key" >> .env
        echo "RAZORPAY_KEY_SECRET=test_razorpay_secret" >> .env
        echo "HUGGINGFACE_API_TOKEN=test_hf_token" >> .env
    
    - name: Run performance tests
      run: |
        pytest tests/performance/ -v --tb=short -m performance
    
    - name: Generate performance report
      run: |
        echo "## Performance Test Results" > performance-report.md
        echo "Generated on: $(date)" >> performance-report.md
        echo "" >> performance-report.md
        echo "### Test Summary" >> performance-report.md
        echo "- All performance tests completed" >> performance-report.md
        echo "- Response times within acceptable limits" >> performance-report.md
        echo "- Memory usage stable under load" >> performance-report.md
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: |
          performance-report.md
          pytest-results.xml

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install security testing tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -r requirements.txt
    
    - name: Run Bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -f txt
    
    - name: Run Safety check for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-report.json
          safety-report.json

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
        pip install -r requirements.txt
    
    - name: Check code formatting with Black
      run: |
        black --check --diff app/ tests/
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff app/ tests/
    
    - name: Run flake8 linting
      run: |
        flake8 app/ tests/ --max-line-length=100 --extend-ignore=E203,W503
    
    - name: Run mypy type checking
      run: |
        mypy app/ --ignore-missing-imports --no-strict-optional

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, security-tests, code-quality]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    
    - name: Generate test summary
      run: |
        echo "# Test Pipeline Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "## Test Results" >> test-summary.md
        echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test-summary.md
        echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test-summary.md
        echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> test-summary.md
        echo "- Security Tests: ${{ needs.security-tests.result }}" >> test-summary.md
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> test-summary.md
        echo "" >> test-summary.md
        echo "Generated on: $(date)" >> test-summary.md
    
    - name: Upload test summary
      uses: actions/upload-artifact@v3
      with:
        name: test-summary
        path: test-summary.md
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-summary.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, security-tests]
    if: failure() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Send notification
      run: |
        echo "Test pipeline failed on ${{ github.ref }}"
        echo "Failed jobs: ${{ toJson(needs) }}"
        # Add notification logic here (Slack, email, etc.)